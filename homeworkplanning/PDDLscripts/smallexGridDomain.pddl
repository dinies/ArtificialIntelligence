(define (domain extended-grid)
  (:requirements :strips)
  (:predicates
    (conn ?square-1 ?square-2)
    (black ?square)
    (white ?square)
    (at ?who ?where )
    (place ?where )
    (clean ?what)
    (on ?what ?something)
    (runnable ?what)
    (clear ?what)
    (finished ?what)
    (loaded ?who)
    (load ?who ?what)
    (tray ?what)
    (table ?where)
    (seat ?where)
    (closet ?where)
    (dishwasher ?where)
    (washingmachine ?where)
    (cloth ?what))

  (:action move
    :parameters (?who ?from ?to)
    :precondition (and (at ?who ?from)
                       (place ?from)
                       (place ?to)
                       (conn ?from ?to)
                       (white ?to))
    :effect (and (at ?who ?to)
                 (not( at ?who ?from)))
    )

  (:action take-up
  :parameters (?who ?what ?from ?there)
  :precondition (and (conn  ?there ?from )
                     (at ?who ?there)
                     (at ?what ?from)
                     (place ?from)
                     (place ?there)
                     (not (loaded ?who))
                     (not (cloth ?what))
                     (not (table ?from)))
  :effect (and (loaded ?who)
               (not(at ?what ?from)))
    )

  (:action take-cloth-from-table
    :parameters (?who ?what ?from ?there ?tray)
    :precondition (and (at ?who ?there)
                       (conn  ?there ?from )
                       (at ?what ?from)
                       (place ?from)
                       (place ?there)
                       (not (loaded ?who))
                       (cloth ?what)
                       (table ?from)
                       (not( on ?tray ?what))
                       (tray ?tray))
    :effect (and (loaded ?who)
                  (not( at ?what ?from))
                  (load ?who ?what)
                  (clear ?from))
                  )

(:action take-tray-from-table
  :parameters (?who ?what ?from ?there ?cloth ?table)
  :precondition (and (at ?who ?there)
                      (conn  ?there ?from )
                      (at ?what ?from)
                      (place ?from)
                      (place ?there)
                      (not (loaded ?who))
                      (tray ?what)
                      (seat ?from))
  :effect (and (loaded ?who)
               (not( at ?what ?from))
               (load ?who ?what)
               (conn ?table ?from)
               (table ?table)
               (on ?cloth ?table)
               (cloth ?cloth)
               (not ( on ?what ?cloth)))
               )

(:action take-from-washer
  :parameters (?who ?what ?from ?there)
  :precondition (and (at ?who ?there)
                      (conn  ?there ?from )
                      (at ?what ?from)
                      (place ?from)
                      (place ?there)
                      (not (loaded ?who))
                      (or (dishwasher ?from)
                          (washingmachine ?from))
                      (finished ?from))
  :effect (and (loaded ?who)
                (not( at ?what ?from))
                (load ?who ?what)
                (clean ?what))
                )

(:action put-in
  :parameters (?who ?what ?where)
  :precondition (and (loaded ?who)
                     (load ?who ?where)
                     (place ?where)
                     (not (table ?where)))
  :effect (and (not (loaded ?who))
               (not (load ?who ?what))
               (at ?what ?where))
               )

(:action put-cloth-on-table
  :parameters (?who ?what ?where)
  :precondition (and (loaded ?who)
                     (load ?who ?where)
                     (place ?where)
                     (table ?where)
                     (clear ?where))
  :effect (and (not (loaded ?who))
               (not (load ?who ?what))
               (at ?what ?where))
                     )

(:action run
  :parameters (?who ?what ?there ?where)
  :precondition (and (at ?who ?there)
                      (conn  ?there ?where )
                      (at ?what ?where)
                      (place ?where)
                      (place ?there)
                      (runnable ?where)
                      (not(finished ?where))
                      )
  :effect (and (not (runnable ?where))
               (finished ?where))

  )
  )
